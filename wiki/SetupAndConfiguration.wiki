#labels Featured,Phase-Deploy
This page shows what's necessary to get the memcached-session-manager up and running.

= Introduction =

For the most simple integration you just need to have a tomcat and a memcached installed.
In your production environment you probably will have several tomcats and you should also have several memcached nodes available, on different pieces of hardware. You need to use sticky sessions, as the memcached-session-manager is designed just for sticky-sessions. Therefore, your load-balancer also has to be configured to make sessions sticky.

The following description assumes, that you have two instances of tomcat and two instances of memcached installed.

Tomcat-1 (t1) will primarily store it's sessions in memcached-2 (m2). Only if m2 is not available, it will store it's sessions in memcached-1 (m1). This is desirable, if t1 and m1 are running on one machine, and tomcat-2 (t2) and m2 are running on another machine. In this case, even the first machine (serving t1 and m1) could crash completely and no session would be lost - they could be served by t2 and m2. The following really nice ASCII art shows this setup.

{{{
<t1>   <t2>
  . \ / .
  .  X  .
  . / \ .
<m1>   <m2>
}}}

= Details =

So what needs to be done for this?

== Decide which serialization strategy to use ==
Starting with release 1.1 there are several session serialization strategies available, as they are described on SerializationStrategies. The default strategy uses java serialization and is already provided by the memcached-session-manager jar. Other strategies are provided by separate jars, in the section below you'll see which jars are required for which strategy.

== Configure tomcat ==
The configuration of tomcat requires two things: you need to drop some jars in your {{{$CATALINA_HOME/lib/}}} directory and you have to configure the memcached session manager in the server.xml.

=== Add jars to {{{$CATALINA_HOME/lib/}}} ===
Independent of the chosen serialization strategy you always need the [http://memcached-session-manager.googlecode.com/files/memcached-session-manager-1.1.jar memcached-session-manager-1.1.jar] and the [http://spymemcached.googlecode.com/files/memcached-2.4.2.jar memcached-2.4.2.jar] (spymemcached). Just download and put them in {{{$CATALINA_HOME/lib/}}}.
  * For *java serialization* nothing more needs to be done.
  * For *javolution based serialization* these jars are required additionally:
    * [http://memcached-session-manager.googlecode.com/files/javolution-5.4.3.1.jar javolution-5.4.3.1.jar] (a patched version of the latest javolution release, the patch is required to support serialization of jdk proxies)
    * [http://memcached-session-manager.googlecode.com/files/msm-javolution-serializer-1.1.1.jar msm-javolution-serializer-1.1.1.jar]
  * For *xstream based serialization* these jars are required additionally:
    * [http://repository.codehaus.org/com/thoughtworks/xstream/xstream/1.3.1/xstream-1.3.1.jar xstream-1.3.1.jar]
    * [http://www.extreme.indiana.edu/dist/java-repository/xpp3/jars/xpp3_min-1.1.3.4.O.jar xpp3_min-1.1.3.4.O.jar] (xml pull parser used by xstream)
    * [http://memcached-session-manager.googlecode.com/files/msm-xstream-serializer-1.1.jar msm-xstream-serializer-1.1.jar]

=== Update server.xml ===
Configure the appropriate context in your {{{$CATALINA_HOME/conf/server.xml}}} so that it contains the {{{Manager}}} configuration for the memcached-session-manager, like this:
{{{
<Context path="/foo">
  <Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager"
    memcachedNodes="n1:localhost:11211 n2:localhost:11212"
    failoverNodes="n2"
    requestUriIgnorePattern=".*\.(png|gif|jpg|css|js)$"
    sessionBackupAsync="false"
    sessionBackupTimeout="100"
    transcoderFactoryClass="de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory"
    copyCollectionsForSerialization="false"
    />
</Context>
}}}

This is an example configuration with all configuration attributes (not all are required). It assumes, that you have running two memcached nodes on localhost, one on port 11211 and another one on port 11212, and that you want to use javolution based serialization. More details to each of the configuration attributes are provided in the section below.

Now you have finished the configuration of your first tomcat. For the second tomcat you just need to change the failover node, you should set this to {{{n1}}} for tomcat-2.

After this is done, you can just start your application and sessions will be stored in the configured memcached nodes as configured. Now you should do some tests with a simulated tomcat failure, a restart of a memcached node etc. - have fun! :-)

Btw: if you want to see how your sessions are stored in memcached [http://tangent.org/552/libmemcached.html libmemcached] provides _memcat_ - really helpful...

=== !MemcachedBackupSessionManager configuration attributes ===

_memcachedNodes_ (required)
  This attribute must contain all memcached nodes you have running. Each memcached node is defined as {{{<id>:<host>:<port>}}}. Several definitions are separated by space.<br/>
<br/>
_failoverNodes_ (optional)
 This attribute must contain the ids of the memcached nodes, that shall not be used by this tomcat for session backup, but only if no other memcached nodes are available. Therefore, you should list those memcached nodes, that are running on the same machine as this tomcat. Several memcached node ids are separated by space.<br/>
<br/>
_requestUriIgnorePattern_ (optional)
 This attribute contains a regular expression for request URIs, that shall not trigger a session backup. If static resources like css, javascript, images etc. are delivered by the same tomcat and the same web application context these requests will also pass the memcached-session-manager. However, as these requests should not change anything in a http session, they should also not trigger a session backup. So you should check if any static resources are delivered by tomcat and in this case you should exclude them by using this attribute. The {{{requestUriIgnorePattern}}} must follow the java regex [http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html Pattern].<br/>
<br/>
_sessionBackupAsync_ (optional, default _false_)
 Specifies if the session shall be stored asynchronously in memcached. If this is _false_, the timeout set via _sessionBackupTimeout_ is evaluated. The default value is _false_. Notice: if the session backup is done asynchronously, it is possible that a session cannot be stored in memcached and we don't notice that - therefore the session would not get relocated to another memcached node.<br/>
<br/>
_sessionBackupTimeout_ (optional, default _100_)
 The timeout in milliseconds after that a session backup is considered as beeing failed. This property is only evaluated if sessions are stored synchronously (set via _sessionBackupAsync_). The default value is _100_ milliseconds.<br/>
<br/>
_transcoderFactoryClass_ (since 1.1, optional, default _de.javakaffee.web.msm.!JavaSerializationTranscoderFactory_)
 The class name of the factory that creates the transcoder to use for serializing/deserializing sessions to/from memcached. The specified class must implement {{{de.javakaffee.web.msm.TranscoderFactory}}} and provide a no-args constructor. Other {{{TranscoderFactory}}} implementations are available through other packages/jars like _msm-xstream-serializer_ and _msm-javolution-serializer_ (as describe above), those are listed and compared on SerializationStrategies. There you also find the related _transcoderFactoryClass_ to use.<br/>
<br/>
_copyCollectionsForSerialization_ (since 1.1, optional, default _false_)
 A boolean value that specifies, if iterating over collection elements shall be done on a copy of the collection or on the collection itself. This configuration property must be supported by the serialization strategy specified with _transcoderFactoryClass_. Which strategy supports this feature can be seen in the column _Copy Collections before serialization_ in the list of  [SerializationStrategies#Available_serialization_strategies available serialization strategies]. This feature and its motivation is described more deeply at [SerializationStrategies#Concurrent_modifications_of_collections].


== Logging ==
As the memcached-session-manager uses [http://code.google.com/p/spymemcached/ spymemcached] the [http://code.google.com/p/spymemcached/wiki/Logging logging hints of spymemcached] might be interesting to you.